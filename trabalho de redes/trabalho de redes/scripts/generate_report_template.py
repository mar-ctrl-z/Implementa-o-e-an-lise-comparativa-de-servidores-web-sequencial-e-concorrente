#!/usr/bin/env python3
"""
Gera template de relat√≥rio no formato SBC (LaTeX)
"""

import sys
from pathlib import Path
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import MATRICULA, NOME_ALUNO


TEMPLATE_LATEX = r'''% Template de Relat√≥rio - Formato SBC
% Aluno: ''' + NOME_ALUNO + r'''
% Matr√≠cula: ''' + MATRICULA + r'''

\documentclass[12pt]{article}

\usepackage{sbc-template}
\usepackage{graphicx,url}
\usepackage[utf8]{inputenc}
\usepackage[brazil]{babel}
\usepackage{booktabs}
\usepackage{multirow}
\usepackage{amsmath}

\sloppy

\title{An√°lise Comparativa de Servidores Web:\\Sequencial vs Concorrente}

\author{''' + NOME_ALUNO + r'''}

\address{Universidade Federal do Piau√≠ (UFPI)\\
  Disciplina: Redes de Computadores II\\
  Matr√≠cula: ''' + MATRICULA + r'''
  \email{[seu-email]@[dominio].com}
}

\begin{document}

\maketitle

\begin{abstract}
Este trabalho apresenta uma an√°lise comparativa entre servidores web implementados com arquiteturas sequencial s√≠ncrona e concorrente ass√≠ncrona. Foram desenvolvidos dois servidores HTTP/1.1 utilizando sockets TCP em Python, avaliados sob diferentes cen√°rios de carga. Os resultados demonstram as vantagens e limita√ß√µes de cada abordagem, fornecendo insights sobre quando cada arquitetura √© mais apropriada.
\end{abstract}

\section{Introdu√ß√£o}

A escolha entre arquiteturas sequenciais e concorrentes √© fundamental no design de servidores web. Enquanto servidores sequenciais oferecem simplicidade e previsibilidade, servidores concorrentes prometem maior throughput e responsividade. Este trabalho investiga empiricamente estas diferen√ßas atrav√©s de uma implementa√ß√£o pr√°tica e testes controlados.

\subsection{Objetivos}

\begin{itemize}
    \item Implementar servidor web sequencial s√≠ncrono usando sockets TCP
    \item Implementar servidor web concorrente usando threads
    \item Definir m√©tricas de performance apropriadas
    \item Avaliar ambos servidores sob diferentes cen√°rios de carga
    \item Identificar vantagens e desvantagens de cada abordagem
\end{itemize}

\section{Fundamenta√ß√£o Te√≥rica}

\subsection{Servidor Sequencial S√≠ncrono}

Um servidor sequencial processa uma requisi√ß√£o por vez, bloqueando a aceita√ß√£o de novas conex√µes at√© que a requisi√ß√£o corrente seja completamente processada. Este modelo √© simples de implementar e debugar, mas n√£o escala bem sob alta concorr√™ncia.

\subsection{Servidor Concorrente com Threads}

Servidores concorrentes utilizam m√∫ltiplas threads de execu√ß√£o para processar requisi√ß√µes simultaneamente. Cada conex√£o √© delegada a uma thread worker, permitindo que o servidor continue aceitando novas conex√µes enquanto outras est√£o sendo processadas.

\subsection{Protocolo HTTP/1.1}

Ambos servidores implementam um subconjunto do protocolo HTTP/1.1, incluindo:
\begin{itemize}
    \item M√©todos: GET, POST, HEAD
    \item C√≥digos de status: 200, 400, 401, 404, 500
    \item Cabe√ßalhos customizados para autentica√ß√£o
\end{itemize}

\section{Metodologia}

\subsection{Ambiente de Desenvolvimento}

\begin{itemize}
    \item \textbf{Linguagem}: Python 3.x
    \item \textbf{Biblioteca de Rede}: Socket (TCP)
    \item \textbf{Paralelismo}: ThreadPoolExecutor (concurrent.futures)
    \item \textbf{Containeriza√ß√£o}: Docker + Docker Compose
    \item \textbf{Endere√ßamento IP}: Baseado nos 4 √∫ltimos d√≠gitos da matr√≠cula
\end{itemize}

\subsection{M√©tricas de Performance}

As seguintes m√©tricas foram definidas para avaliar os servidores:

\begin{equation}
\text{Lat√™ncia M√©dia} = \frac{1}{n} \sum_{i=1}^{n} (t_{fim}^{i} - t_{inicio}^{i})
\end{equation}

\begin{equation}
\text{Throughput} = \frac{\text{Total de Requisi√ß√µes}}{\text{Tempo Total}}
\end{equation}

\begin{equation}
\text{Taxa de Sucesso} = \frac{\text{Requisi√ß√µes Bem-sucedidas}}{\text{Total de Requisi√ß√µes}} \times 100\%
\end{equation}

\begin{equation}
\text{Desvio Padr√£o} = \sqrt{\frac{1}{n-1} \sum_{i=1}^{n} (x_i - \bar{x})^2}
\end{equation}

\subsection{Cen√°rios de Teste}

Foram elaborados os seguintes cen√°rios para avaliar diferentes aspectos dos servidores:

\begin{table}[h]
\centering
\caption{Cen√°rios de Teste Definidos}
\label{tab:cenarios}
\begin{tabular}{@{}lccl@{}}
\toprule
\textbf{Cen√°rio} & \textbf{Clientes} & \textbf{Req/Cliente} & \textbf{Tipo} \\ \midrule
Light Fast       & 3                 & 10                    & R√°pidas       \\
Light Slow       & 3                 & 10                    & Lentas        \\
Medium Mixed     & 10                & 15                    & Mistas        \\
Heavy Stress     & 30                & 20                    & R√°pidas       \\
Heavy Slow       & 20                & 10                    & Lentas        \\ \bottomrule
\end{tabular}
\end{table}

Cada cen√°rio foi executado \textbf{10 vezes} para garantir signific√¢ncia estat√≠stica.

\section{Implementa√ß√£o}

\subsection{Servidor Sequencial}

\begin{verbatim}
def run_server():
    with socket.socket(socket.AF_INET, 
                       socket.SOCK_STREAM) as sock:
        sock.bind((HOST, PORT))
        sock.listen()
        
        while True:
            conn, addr = sock.accept()
            handle_request(conn, addr)
            conn.close()
\end{verbatim}

\subsection{Servidor Concorrente}

\begin{verbatim}
def run_server():
    executor = ThreadPoolExecutor(max_workers=20)
    
    with socket.socket(socket.AF_INET, 
                       socket.SOCK_STREAM) as sock:
        sock.bind((HOST, PORT))
        sock.listen()
        
        while True:
            conn, addr = sock.accept()
            executor.submit(handle_request, 
                          conn, addr)
\end{verbatim}

\subsection{Autentica√ß√£o Customizada}

Ambos servidores implementam autentica√ß√£o atrav√©s do cabe√ßalho \texttt{X-Custom-ID}, calculado como:

\begin{equation}
\text{X-Custom-ID} = \text{SHA1}(\text{matr√≠cula} + \text{" "} + \text{nome})
\end{equation}

\section{Resultados}

\subsection{An√°lise Quantitativa}

\textit{[INSERIR AQUI: Tabela com resultados de lat√™ncia e throughput para cada cen√°rio]}

\begin{table}[h]
\centering
\caption{Resultados de Performance}
\label{tab:resultados}
\begin{tabular}{@{}llcc@{}}
\toprule
\textbf{Cen√°rio} & \textbf{Servidor} & \textbf{Lat√™ncia (s)} & \textbf{Throughput (req/s)} \\ \midrule
Light Fast       & Sequencial        & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\
                 & Concorrente       & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\
\midrule
Medium Mixed     & Sequencial        & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\
                 & Concorrente       & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\
\midrule
Heavy Stress     & Sequencial        & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\
                 & Concorrente       & X.XXXX ¬± X.XXXX       & XX.XX ¬± X.XX                \\ \bottomrule
\end{tabular}
\end{table}

\subsection{An√°lise Gr√°fica}

\textit{[INSERIR AQUI: Gr√°ficos de compara√ß√£o]}

\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{../../results/comparacao_latencia.png}
\caption{Compara√ß√£o de Lat√™ncia entre Servidores}
\label{fig:latencia}
\end{figure}

\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{../../results/comparacao_throughput.png}
\caption{Compara√ß√£o de Throughput entre Servidores}
\label{fig:throughput}
\end{figure}

\section{Discuss√£o}

\subsection{Quando o Servidor Sequencial √© Melhor?}

\textit{[PREENCHER com base nos resultados obtidos]}

O servidor sequencial demonstrou vantagens em:
\begin{itemize}
    \item Cargas leves (poucos clientes)
    \item Requisi√ß√µes muito r√°pidas
    \item Cen√°rios onde a overhead de threads n√£o compensa
\end{itemize}

\subsection{Quando o Servidor Concorrente √© Melhor?}

\textit{[PREENCHER com base nos resultados obtidos]}

O servidor concorrente mostrou-se superior em:
\begin{itemize}
    \item Cargas m√©dias e pesadas
    \item Alta concorr√™ncia
    \item Requisi√ß√µes com I/O ou processamento lento
\end{itemize}

\subsection{Vantagens e Desvantagens}

\textbf{Servidor Sequencial:}
\begin{itemize}
    \item \textbf{Vantagens}: Simplicidade, menor uso de mem√≥ria, previsibilidade
    \item \textbf{Desvantagens}: Baixo throughput, n√£o escala, bloqueia clientes
\end{itemize}

\textbf{Servidor Concorrente:}
\begin{itemize}
    \item \textbf{Vantagens}: Alto throughput, responsividade, escala melhor
    \item \textbf{Desvantagens}: Maior complexidade, overhead de threads, race conditions
\end{itemize}

\section{Considera√ß√µes Finais}

Este trabalho demonstrou empiricamente as diferen√ßas entre arquiteturas sequenciais e concorrentes para servidores web. Os resultados confirmam que n√£o existe uma "melhor" arquitetura absoluta, mas sim diferentes trade-offs adequados a diferentes contextos.

Para aplica√ß√µes com baixa carga e requisi√ß√µes r√°pidas, a simplicidade do modelo sequencial pode ser vantajosa. J√° para aplica√ß√µes web modernas com alta concorr√™ncia, o modelo concorrente √© essencial.

\subsection{Trabalhos Futuros}

\begin{itemize}
    \item Implementar servidor ass√≠ncrono com asyncio
    \item Avaliar modelo multiprocesso vs threads
    \item Testes com requisi√ß√µes de diferentes tamanhos
    \item An√°lise de consumo de mem√≥ria e CPU
\end{itemize}

\bibliographystyle{sbc}
\bibliography{sbc-template}

\end{document}
'''


README_RELATORIO = '''# üìÑ Relat√≥rio SBC

## Estrutura do Relat√≥rio

Este diret√≥rio cont√©m o relat√≥rio no formato SBC (Sociedade Brasileira de Computa√ß√£o).

## Arquivos

- `relatorio_sbc.tex` - Documento LaTeX principal
- `sbc-template.sty` - Estilo SBC (baixar de: https://www.sbc.org.br/documentos-da-sbc/summary/169-templates-para-artigos-e-capitulos-de-livros/878-modelosparapublicaodeartigos)

## Como Compilar

### Online (Recomendado)
1. Acesse [Overleaf](https://www.overleaf.com/)
2. Fa√ßa upload dos arquivos
3. Compile online

### Local (Linux/Mac)
```bash
pdflatex relatorio_sbc.tex
pdflatex relatorio_sbc.tex  # Segunda passagem para refer√™ncias
```

### Local (Windows)
Instale MiKTeX ou TeX Live e compile usando TeXworks ou TeXstudio.

## Preenchimento

1. ‚úÖ **Dados pessoais** j√° est√£o preenchidos automaticamente
2. üìä **Resultados**: Ap√≥s executar `make test-all` e `make analyze`, copie os valores das tabelas para o relat√≥rio
3. üìà **Gr√°ficos**: J√° est√£o referenciados, certifique-se que os arquivos PNG existam em `results/`
4. üìù **Discuss√£o**: Preencha com suas an√°lises baseadas nos resultados obtidos

## Checklist

- [ ] Baixar `sbc-template.sty` e colocar neste diret√≥rio
- [ ] Preencher se√ß√£o de Resultados com dados reais
- [ ] Inserir gr√°ficos (j√° gerados automaticamente)
- [ ] Preencher Discuss√£o com an√°lises
- [ ] Revisar Conclus√£o
- [ ] Compilar e gerar PDF final
- [ ] Incluir email correto no template

## Recursos

- Template SBC: https://www.sbc.org.br/documentos-da-sbc/summary/169-templates-para-artigos-e-capitulos-de-livros/878-modelosparapublicaodeartigos
- Overleaf: https://www.overleaf.com/
'''


def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Gera template de relat√≥rio SBC')
    parser.add_argument('--force', action='store_true', help='Sobrescreve arquivos existentes')
    args = parser.parse_args()
    
    # Diret√≥rio de destino
    project_root = Path(__file__).parent.parent
    relatorio_dir = project_root / 'docs' / 'relatorio'
    relatorio_dir.mkdir(parents=True, exist_ok=True)
    
    # Arquivos
    tex_file = relatorio_dir / 'relatorio_sbc.tex'
    readme_file = relatorio_dir / 'README.md'
    
    # Verifica se j√° existe
    if tex_file.exists() and not args.force:
        print(f"‚ö†Ô∏è  Arquivo {tex_file} j√° existe!")
        print("   Use --force para sobrescrever")
        return
    
    # Cria arquivo LaTeX
    with open(tex_file, 'w', encoding='utf-8') as f:
        f.write(TEMPLATE_LATEX)
    print(f"‚úÖ Template LaTeX criado: {tex_file}")
    
    # Cria README
    with open(readme_file, 'w', encoding='utf-8') as f:
        f.write(README_RELATORIO)
    print(f"‚úÖ README criado: {readme_file}")
    
    print("\nüìÑ Template do relat√≥rio SBC gerado com sucesso!")
    print(f"\nüìÅ Localiza√ß√£o: {relatorio_dir}/")
    print("\nüìù Pr√≥ximos passos:")
    print("   1. Baixar sbc-template.sty de: https://www.sbc.org.br/")
    print("   2. Executar testes: make test-all")
    print("   3. Gerar an√°lises: make analyze")
    print("   4. Preencher resultados no relat√≥rio")
    print("   5. Compilar LaTeX (Overleaf recomendado)")
    print("")


if __name__ == '__main__':
    main()

